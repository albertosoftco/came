<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <!--  SimpleStyles.XAML define un conjunto de estilos de control que son puntos de partida simplificados para crear sus propios controles  -->

    <!--
        Pinceles: se usan para definir el color del fondo, el primer plano, la selección, la habilitación, etc. de todos los controles
        Si desea cambiar el color de un control, basta con cambiar el pincel; si desea agregar una nueva forma o cambiar la organización, edite también la plantilla
    -->

    <!--  NormalBrush se usa como fondo para SimpleButton y SimpleRepeatButton  -->
    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#CCC" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NoBrush" StartPoint="0,0" EndPoint="0,1" Opacity="0">
    	<GradientStop Offset="0.0" Color="#EEE" />
    	<GradientStop Offset="1.0" Color="#CCC" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#CCC" />
        <GradientStop Offset="1.0" Color="#444" />
    </LinearGradientBrush>

    <!--  LightBrush se usa para las áreas de contenido como el fondo de los menús o del control de ficha  -->
    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#EEE" />
    </LinearGradientBrush>

    <!--  MouseOverBrush se usa para MouseOver en Button, Radio Button y CheckBox  -->
    <LinearGradientBrush x:Key="MouseOverBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#FFF" />
        <GradientStop Offset="1.0" Color="#AAA" />
    </LinearGradientBrush>

    <!--  PressedBrush se usa para Pressed en Button, Radio Button y CheckBox  -->
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#BBB" />
        <GradientStop Offset="0.1" Color="#EEE" />
        <GradientStop Offset="0.9" Color="#EEE" />
        <GradientStop Offset="1.0" Color="#FFF" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#444" />
        <GradientStop Offset="1.0" Color="#888" />
    </LinearGradientBrush>

    <!--  SelectedBackgroundBrush se usa para el elemento Selected en ListBoxItem y ComboBoxItem  -->
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!--  Los pinceles deshabilitados se usan para el aspecto de los controles cuando están deshabilitados  -->
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />
    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <!--  Se usa para el fondo de los controles ScrollViewer, TreeView, ListBox, Expander, TextBox y Tab  -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <!--  DefaultedBorderBrush se usa para mostrar KeyBoardFocus  -->
    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0.0" Color="#777" />
        <GradientStop Offset="1.0" Color="#000" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <!--  Se usa para los glifos de los controles CheckMark, Radio Button, TreeViewItem y Expander ToggleButton  -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />


    <!--  Los pares de Style y Template se usan para definir cada elemento del control  -->
    <!--  Style proporciona los valores predeterminados del control; Template proporciona los elementos de cada control  -->

    <!--  SimpleButtonFocusVisual se usa para mostrar el foco del teclado alrededor de un control SimpleButton  -->

    <!--  Button simple: este control establece pinceles en cada estado. Tenga en cuenta que estos pinceles deben aparecer en la lista de arriba, ya que son recursos estáticos  -->
    <Style x:Key="SimpleButton"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleButtonNoBorder"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleButtonRounded"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="20,20,20,20"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleButtonLftBizeled"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="10,0,10,0"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleButtonRgtBizeled"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,10,0,10"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SimpleButtonTopRounded"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="20,20,0,0"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleButtonTopRoundedLeft"
    	BasedOn="{x:Null}"
    	TargetType="{x:Type Button}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
    				<Grid x:Name="Grid">
    					<Border x:Name="Border"
    						Background="{TemplateBinding Background}"
    						BorderBrush="{TemplateBinding BorderBrush}"
    						BorderThickness="{TemplateBinding BorderThickness}"
    						CornerRadius="30,0,0,0"
    						Padding="{TemplateBinding Padding}" />

    					<!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
    					<ContentPresenter Margin="{TemplateBinding Padding}"
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						RecognizesAccessKey="True" />
    				</Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsKeyboardFocused" Value="true">
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsMouseOver" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
    					</Trigger>
    					<Trigger Property="IsPressed" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="true" />
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
    						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="SimpleButtonTopRoundedRight"
    	BasedOn="{x:Null}"
    	TargetType="{x:Type Button}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
    				<Grid x:Name="Grid">
    					<Border x:Name="Border"
    						Background="{TemplateBinding Background}"
    						BorderBrush="{TemplateBinding BorderBrush}"
    						BorderThickness="{TemplateBinding BorderThickness}"
    						CornerRadius="0,30,0,0"
    						Padding="{TemplateBinding Padding}" />

    					<!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
    					<ContentPresenter Margin="{TemplateBinding Padding}"
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						RecognizesAccessKey="True" />
    				</Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsKeyboardFocused" Value="true">
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsMouseOver" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
    					</Trigger>
    					<Trigger Property="IsPressed" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="true" />
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
    						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <Style x:Key="SimpleButtonBottomRounded"
           BasedOn="{x:Null}"
           TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0,0,20,20"
                                Padding="{TemplateBinding Padding}" />

                        <!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SimpleButtonBottomRoundedLeft"
    	BasedOn="{x:Null}"
    	TargetType="{x:Type Button}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
    				<Grid x:Name="Grid">
    					<Border x:Name="Border"
    						Background="{TemplateBinding Background}"
    						BorderBrush="{TemplateBinding BorderBrush}"
    						BorderThickness="{TemplateBinding BorderThickness}"
    						CornerRadius="0,0,0,30"
    						Padding="{TemplateBinding Padding}" />

    					<!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
    					<ContentPresenter Margin="{TemplateBinding Padding}"
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						RecognizesAccessKey="True" />
    				</Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsKeyboardFocused" Value="true">
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsMouseOver" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
    					</Trigger>
    					<Trigger Property="IsPressed" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="true" />
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
    						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="SimpleButtonBottomRoundedRight"
    	BasedOn="{x:Null}"
    	TargetType="{x:Type Button}">
    	<Setter Property="Background" Value="{DynamicResource NormalBrush}" />
    	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">

                    <!--  Grid se usa como raíz porque resulta sencillo agregarle más elementos para personalizar el botón  -->
    				<Grid x:Name="Grid">
    					<Border x:Name="Border"
    						Background="{TemplateBinding Background}"
    						BorderBrush="{TemplateBinding BorderBrush}"
    						BorderThickness="{TemplateBinding BorderThickness}"
    						CornerRadius="0,0,30,0"
    						Padding="{TemplateBinding Padding}" />

    					<!--  Content Presenter es donde el control coloca el contenido de texto, etc.  -->
                        <!--  Los enlaces sirven para que el control se pueda parametrizar sin editar la plantilla  -->
    					<ContentPresenter Margin="{TemplateBinding Padding}"
    						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
    						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
    						RecognizesAccessKey="True" />
    				</Grid>

                    <!--  Cada estado establece un pincel en el elemento Border de la plantilla  -->
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsKeyboardFocused" Value="true">
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsMouseOver" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
    					</Trigger>
    					<Trigger Property="IsPressed" Value="true">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="true" />
    					<Trigger Property="IsEnabled" Value="false">
    						<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
    						<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
    						<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <Style x:Key="GlassButton" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="42" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder"
                            Background="#AA000000"
                            BorderBrush="#99FFFFFF"
                            BorderThickness="4,4,4,4"
                            RenderTransformOrigin="0.5,0.5">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="1.7*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#08FFFFFF" />
                                        <GradientStop Offset="1" Color="#88FFFFFF" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <ContentPresenter x:Name="ButtonContentPresenter"
                                              Grid.RowSpan="2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GlassButtonRounded" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="42" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder"
                            Background="#AA000000"
                            BorderBrush="#99FFFFFF"
                            BorderThickness="4,4,4,4"
                            CornerRadius="25,25,25,25"
                            RenderTransformOrigin="0.5,0.5">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="1.7*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0" CornerRadius="23,23,0,0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#08FFFFFF" />
                                        <GradientStop Offset="1" Color="#88FFFFFF" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <ContentPresenter x:Name="ButtonContentPresenter"
                                              Grid.RowSpan="2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="RenderTransform">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0.9" ScaleY="0.9" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0"
                                   Stroke="#60000000"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0"
                                   Stroke="#60000000"
                                   StrokeDashArray="1 2"
                                   StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Casilla simple  -->
    <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">

                    <!--  BulletDecorator se usa para proporcionar una alineación de referencia entre la marca de verificación y el contenido  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />

                                <Path x:Name="CheckMark"
                                      Data="M 0 0 L 13 13 M 0 13 L 13 0"
                                      SnapsToDevicePixels="False"
                                      Stroke="{DynamicResource GlyphBrush}"
                                      StrokeThickness="2" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <!--  Usa Visibility para ocultar y mostrar el control CheckMark en IsChecked  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Botón de opción simple  -->
    <Style x:Key="SimpleRadioButton" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!--  BulletDecorator se usa para proporcionar una alineación de referencia entre la marca de verificación y el contenido  -->
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Ellipse x:Name="Ellipse_Border"
                                         Fill="{TemplateBinding Background}"
                                         Stroke="{TemplateBinding BorderBrush}"
                                         StrokeThickness="1" />
                                <Ellipse x:Name="CheckMark"
                                         Margin="4"
                                         Fill="{DynamicResource GlyphBrush}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Ellipse_Border" Property="Stroke" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse_Border" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Ellipse_Border" Property="Stroke" Value="#40000000" />
                            <Setter Property="Foreground" Value="#80000000" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  RepeatButton simple: el control ScrollBar simple lo usa para los botones hacia arriba y hacia abajo  -->
    <Style x:Key="SimpleRepeatButton"
           BasedOn="{x:Null}"
           d:IsControlPart="True"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter x:Name="ContentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Thumb simple: el control Thumb es la parte arrastrable de Scrollbar  -->
    <Style x:Key="SimpleThumbStyle"
           BasedOn="{x:Null}"
           d:IsControlPart="True"
           TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid" Margin="0,0,0,0">
                        <Rectangle x:Name="Rectangle"
                                   Width="Auto"
                                   Height="Auto"
                                   HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   Fill="{DynamicResource NormalBrush}"
                                   RadiusX="2"
                                   RadiusY="2"
                                   Stroke="{DynamicResource NormalBorderBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsEnabled" Value="False" />
                        <Trigger Property="IsDragging" Value="True" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Estilo ScrollRepeatButton simple: este control RepeatButton se usa por encima y por debajo del control Thumb en Scrollbar. Su aspecto es transparente para que no aparezca superpuesto sobre la barra de desplazamiento  -->
    <Style x:Key="SimpleScrollRepeatButtonStyle"
           d:IsControlPart="True"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ScrollBar Simple: usa SimpleThumb, SimpleRepeatButton y SimpleScrollRepeatButton  -->

    <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                          Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                          Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <RepeatButton x:Name="DecreaseRepeat"
                                      Command="ScrollBar.LineUpCommand"
                                      Style="{DynamicResource SimpleRepeatButton}">
                            <Grid>
                                <Path x:Name="DecreaseArrow"
                                      Data="M 0 4 L 8 4 L 4 0 Z"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>

                        <!--  El control Track es un contenedor de diseño especial que cambia el tamaño del control Thumb y de RepeatButton, que saltan al desplazar cualquiera de sus lados  -->
                        <Track x:Name="PART_Track"
                               Grid.Row="1"
                               IsDirectionReversed="true"
                               Orientation="Vertical">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                              Command="ScrollBar.PageDownCommand"
                                              Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                              Command="ScrollBar.PageUpCommand"
                                              Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton x:Name="IncreaseRepeat"
                                      Grid.Row="2"
                                      Command="ScrollBar.LineDownCommand"
                                      Style="{DynamicResource SimpleRepeatButton}">
                            <Grid>
                                <Path x:Name="IncreaseArrow"
                                      Data="M 0 0 L 4 4 L 8 0 Z"
                                      Stroke="{TemplateBinding Foreground}"
                                      StrokeThickness="1" />
                            </Grid>
                        </RepeatButton>
                    </Grid>

                    <!--
                        Usa una única plantilla para el control ScrollBar y lo gira para colocarlo en posición horizontal
                        También cambia los comandos para que sean de izquierda y derecha en lugar de hacia arriba y hacia abajo
                    -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!--  Girar el control ScrollBar de vertical a horizontal  -->
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!--  Track está enlazado a Orientation de manera interna, así que es necesario girarlo para volver a colocarlo en posición vertical  -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                            <!--  Cambiar los comandos para convertirlos en comandos Horizontal  -->
                            <Setter TargetName="DecreaseRepeat" Property="Command" Value="ScrollBar.LineLeftCommand" />
                            <Setter TargetName="IncreaseRepeat" Property="Command" Value="ScrollBar.LineRightCommand" />
                            <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        ScrollViewer simple
        ScrollViewer es un control Grid que tiene un control ContentPresenter y un control ScrollBar horizontal y vertical
        Lo usan ListBox, MenuItem, ComboBox y TreeView
    -->
    <Style x:Key="SimpleScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Row="0"
                                                Grid.Column="0"
                                                Margin="{TemplateBinding Padding}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}" />

                        <!--  La visibilidad de los controles ScrollBar se controla mediante la implementación del control  -->
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   Style="{DynamicResource SimpleScrollBar}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding Path=HorizontalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Orientation="Vertical"
                                   Style="{DynamicResource SimpleScrollBar}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding Path=VerticalOffset,
                                                   Mode=OneWay,
                                                   RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListBox simple: usa SimpleScrollViewer para permitir el desplazamiento por los elementos y SimpleListBoxItem para definir el aspecto de cada elemento  -->
    <Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Grid>
                        <Border x:Name="Border"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ScrollViewer Margin="1"
                                      Background="{TemplateBinding Background}"
                                      Focusable="false"
                                      Style="{DynamicResource SimpleScrollViewer}">

                            <!--  El control StackPanel se usa para mostrar los elementos secundarios. Para ello, establece IsItemsHost en True  -->
                            <StackPanel Margin="2" IsItemsHost="true" />

                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ListBoxItem simple: se usa para cada elemento de ListBox. El contenido del elemento se coloca en ContentPresenter  -->

    <Style x:Key="SimpleListBoxItem"
           d:IsControlPart="True"
           TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  Cambiar IsSelected SelectedBackgroundBrush para establecer el color de selección de los elementos  -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ExpanderToggleButton simple: el control Expander usa este botón. Cuando se activa o desactiva, cambia la visibilidad de Up_Arrow y Down_Arrow  -->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle x:Name="Rectangle"
                       Margin="0,0,0,0"
                       Fill="Transparent"
                       Stroke="{DynamicResource NormalBorderBrush}" />
            <Path x:Name="Up_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="{DynamicResource GlyphBrush}" />
            <Path x:Name="Down_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 4 L 4 0 L 8 4 Z"
                  Fill="{DynamicResource GlyphBrush}"
                  Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="Up_Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--
        Expander simple
        Usa el control ExpanderToggleButton simple. Establece la visibilidad de ContentPresenter para expandirse
        Limitaciones: el control Expander simple sólo se expande hacia abajo
    -->
    <Style x:Key="SimpleExpander" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow" Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border"
                                Grid.Row="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2,2,0,0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Background="{DynamicResource NormalBrush}"
                                              IsChecked="{Binding Path=IsExpanded,
                                                                  Mode=TwoWay,
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True"
                                              Template="{DynamicResource ExpanderToggleButton}" />
                                <ContentPresenter Grid.Column="1"
                                                  Margin="4"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <Border x:Name="ExpandSite"
                                Grid.Row="1"
                                Background="{DynamicResource WindowBackgroundBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1,0,1,1"
                                CornerRadius="0,0,2,2"
                                Visibility="Collapsed">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Focusable="false" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBox Toggle Button simple: se usa en controles ComboBox para expandir y contraer el elemento desplegable del ComboBox  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Rectangle"
                       Grid.ColumnSpan="2"
                       Width="Auto"
                       Height="Auto"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Fill="{DynamicResource NormalBrush}"
                       RadiusX="5"
                       RadiusY="5"
                       Stroke="{DynamicResource NormalBorderBrush}" />
            <Rectangle Grid.Column="0"
                       Width="Auto"
                       Height="Auto"
                       HorizontalAlignment="Stretch"
                       VerticalAlignment="Stretch"
                       Fill="{DynamicResource WindowBackgroundBrush}"
                       RadiusX="5"
                       RadiusY="5"
                       Stroke="{DynamicResource NormalBorderBrush}" />
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="{DynamicResource GlyphBrush}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Rectangle" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Rectangle" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Es el área que contiene el elemento seleccionado en el control ComboBox  -->

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <!--  Debe denominarse PART_ContentHost  -->
        <Border x:Name="PART_ContentHost"
                Background="{TemplateBinding Background}"
                Focusable="False" />
    </ControlTemplate>

    <!--
        ComboBox simple
        Usa un control ComboBoxToggleButton para expandir y contraer un control Popup,
        SimpleScrollViewer para permitir el desplazamiento de los elementos y SimpleComboBoxItem para definir el aspecto de cada elemento
        El control Popup muestra una lista de elementos en un StackPanel
    -->

    <Style x:Key="SimpleComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <!--  ToggleButton está enlazados a datos con el propio ComboBox para activar o desactivar IsDropDownOpen  -->
                        <ToggleButton x:Name="ToggleButton"
                                      Grid.Column="2"
                                      ClickMode="Press"
                                      Focusable="false"
                                      IsChecked="{Binding Path=IsDropDownOpen,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Template="{DynamicResource ComboBoxToggleButton}" />
                        <ContentPresenter x:Name="ContentSite"
                                          Margin="3,3,23,3"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False" />

                        <!--  El TextBox debe denominarse PART_EditableTextBox ya que, de lo contrario, el ComboBox no lo reconocerá  -->
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="3,3,23,3"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Background="Transparent"
                                 Focusable="True"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Style="{x:Null}"
                                 Template="{DynamicResource ComboBoxTextBox}"
                                 Visibility="Hidden" />

                        <!--  El control Popup muestra la lista de elementos del ComboBox. IsOpen está enlazado a datos con IsDropDownOpen, que se activa y desactiva mediante el control ComboBoxToggleButton  -->
                        <Popup x:Name="Popup"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                  SnapsToDevicePixels="True">
                                <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderBrush="{DynamicResource SolidBorderBrush}"
                                        BorderThickness="1" />
                                <ScrollViewer Margin="4,6,4,6"
                                              CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Auto"
                                              SnapsToDevicePixels="True"
                                              Style="{DynamicResource SimpleScrollViewer}"
                                              VerticalScrollBarVisibility="Auto">

                                    <!--  StackPanel se usa para mostrar los elementos secundarios estableciendo IsItemsHost en True  -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />

                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  Impone un tamaño mínimo al control DropDown si está vacío  -->
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBoxItem simple: se usa para cada elemento incluido en el control ComboBox. Puede cambiar el color seleccionado para cada uno de los elementos siguientes  -->
    <Style x:Key="SimpleComboBoxItem"
           d:IsControlPart="True"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--  Cambiar IsHighlighted SelectedBackgroundBrush para definir el color de selección de los elementos  -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        SimpleProgressBar simple
        La plantilla usa dos controles Border para mostrar el seguimiento y el progreso
        Limitaciones: sólo admite un control ProgressBar con orientación horizontal
    -->
    <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid>

                        <!--  Este control Border muestra el seguimiento. Debe denominarse PART_Track  -->
                        <Border x:Name="PART_Track"
                                Background="{DynamicResource PressedBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2" />

                        <!--  Este control Border muestra el progreso. Debe denominarse PART_Indicator para que el control funcione  -->
                        <Border x:Name="PART_Indicator"
                                HorizontalAlignment="Left"
                                Background="{DynamicResource MouseOverBrush}"
                                BorderBrush="{DynamicResource NormalBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TextBox simple  -->
    <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowBackgroundBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2"
                                Padding="2">

                            <!--  La implementación coloca el contenido en el ScrollViewer. Debe denominarse PART_ContentHost para que el control funcione  -->
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Margin="0"
                                          Background="{TemplateBinding Background}"
                                          Style="{DynamicResource SimpleScrollViewer}" />

                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Etiqueta simple: esta plantilla es simplemente un ContentPresenter que muestra el contenido de la etiqueta  -->
    <Style x:Key="SimpleLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Menú simple: esta plantilla usa StackPanel para presentar MenuItems  -->
    <Style x:Key="SimpleMenu" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid>
                        <Border x:Name="Border"
                                Margin="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <StackPanel Background="{TemplateBinding Background}"
                                    ClipToBounds="True"
                                    IsItemsHost="True"
                                    Orientation="Horizontal" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  MenuItem simple usa este control BitmapEffect  -->

    <!--  MenuItem simple: la plantilla usa desencadenadores para proporcionar cuatro disposiciones distintas de los elementos de menú que se establecen a través de la propiedad Role  -->
    <Style x:Key="SimpleMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>

                            <!--
                                El control Grid se usa para reunir las columnas de un Icon, Content, Glyph checkmark y Arrow para mostrar el siguiente nivel
                                El tamaño compartido se usa en el control Grid para que el Icon, Content, Arrow de cada MenuItem se alineen juntos
                            -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"
                                                  MinWidth="17"
                                                  SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                <ColumnDefinition Width="14" />
                            </Grid.ColumnDefinitions>

                            <!--  ContentPresenter para mostrar un icono si es necesario  -->
                            <ContentPresenter x:Name="Icon"
                                              Margin="4,0,6,0"
                                              VerticalAlignment="Center"
                                              ContentSource="Icon" />

                            <!--  Glyph es una marca de verificación si se requiere en un menú que se puede activar  -->
                            <Grid x:Name="GlyphPanel"
                                  Margin="4,0,6,0"
                                  VerticalAlignment="Center"
                                  Visibility="Hidden">
                                <Path x:Name="GlyphPanelpath"
                                      VerticalAlignment="Center"
                                      Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z"
                                      Fill="{TemplateBinding Foreground}"
                                      FlowDirection="LeftToRight" />
                            </Grid>

                            <!--  Contenido del texto del menú, etc.  -->
                            <ContentPresenter x:Name="HeaderHost"
                                              Grid.Column="1"
                                              Margin="{TemplateBinding Padding}"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True" />

                            <!--  Arrow dibuja la ruta que apunta al siguiente nivel del menú  -->
                            <Grid x:Name="ArrowPanel"
                                  Grid.Column="3"
                                  Margin="4,0,6,0"
                                  VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath"
                                      VerticalAlignment="Center"
                                      Data="M0,0 L0,8 L4,4 z"
                                      Fill="{TemplateBinding Foreground}" />
                            </Grid>

                            <!--  El Popup es el cuerpo del menú que se expande horizontal o verticalmente según el nivel del elemento  -->
                            <Popup x:Name="SubMenuPopup"
                                   AllowsTransparency="true"
                                   Focusable="false"
                                   IsOpen="{Binding Path=IsSubmenuOpen,
                                                    RelativeSource={RelativeSource TemplatedParent}}"
                                   Placement="Right"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                   VerticalOffset="-3">
                                <Grid x:Name="SubMenu">
                                    <Border x:Name="SubMenuBorder"
                                            Background="{DynamicResource WindowBackgroundBrush}"
                                            BorderBrush="{DynamicResource SolidBorderBrush}"
                                            BorderThickness="1" />

                                    <!--  StackPanel contiene los elementos secundarios del menú. Se establece cuando IsItemsHost=True  -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Grid>
                            </Popup>

                        </Grid>
                    </Border>

                    <!--  Estos desencadenadores vuelven a configurar las cuatro organizaciones de MenuItem para mostrar distintos niveles del menú a través de Role  -->
                    <ControlTemplate.Triggers>

                        <!--  Role = TopLevelHeader: éste es el elemento de menú raíz de un menú; el control Popup se expande hacia abajo  -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                            <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = TopLevelItem: éste es un elemento de menú secundario del nivel superior sin elementos secundarios  -->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="Padding" Value="6,3,6,3" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Role = SubMenuHeader: éste es un elemento de menú secundario que no tiene elementos secundarios  -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                        </Trigger>

                        <!--  Role = SubMenuItem: éste es un elemento de menú secundario que tiene elementos secundarios  -->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top" />
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="PopupAnimation" Value="None" />
                        </Trigger>

                        <!--  Si no hay ningún icono, se contrae Icon Content  -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  GlyphPanel contiene la marca de verificación  -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger SourceName="SubMenuPopup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="SubMenu" Property="Margin" Value="0,0,3,3" />
                            <Setter TargetName="SubMenu" Property="SnapsToDevicePixels" Value="true" />
                        </Trigger>

                        <!--  Usar los colores del sistema para el resaltado del menú e IsEnabled  -->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Separador simple: esta plantilla se usa para un separador de un menú  -->
    <Style x:Key="SimpleSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        TabControl simple
        Esta plantilla usa un TabItem simple para cada ficha. Los elementos de ficha se colocan en TabPanel
        Limitaciones: el TabControl simple sólo permite que las fichas se muestren en la parte superior del control Tab. Puede cambiar la posición de TabPanel para modificar este comportamiento
    -->

    <Style x:Key="SimpleTabControl" TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!--
                            TabPanel es un contenedor de diseño que permite que los controles TabItem se ajusten y ordenen cuando se seleccionan
                            La implementación sabe usar este control porque está marcado como IsItemsHost = True
                        -->
                        <TabPanel x:Name="HeaderPanel"
                                  Grid.Row="0"
                                  Margin="0,0,4,-1"
                                  Panel.ZIndex="1"
                                  Background="Transparent"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1" />

                        <Border x:Name="Border"
                                Grid.Row="1"
                                Background="{DynamicResource WindowBackgroundBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="2"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">

                            <!--  La implementación modifica el contenido. Este control debe denominarse PART_SelectedContentHost  -->
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="4"
                                              ContentSource="SelectedContent" />

                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TabItem simple  -->
    <Style x:Key="SimpleTabItem"
           d:IsControlPart="True"
           TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border x:Name="Border"
                                Margin="0,0,-4,0"
                                Background="{DynamicResource LightBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="2,12,0,0">
                            <ContentPresenter x:Name="ContentSite"
                                              Margin="12,2,12,2"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              ContentSource="Header"
                                              RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SliderThumb simple: el control Thumb es la parte arrastrable de un control deslizante  -->
    <Style x:Key="SimpleSliderThumb"
           d:IsControlPart="True"
           TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Ellipse x:Name="Ellipse"
                                 Fill="{DynamicResource NormalBrush}"
                                 Stroke="{DynamicResource NormalBorderBrush}"
                                 StrokeThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
        Control deslizante simple
        Al igual que ScrollBar, esta plantilla usa Track para diseñar el control Thumb arrastrable, que tiene un control RepeatBotton arriba y abajo
        Usa el control simple SliderThumb y SimpleScrollRepeatButtonStyle para los controles RepeatButton arriba y abajo
    -->
    <Style x:Key="SimpleSlider" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Grid x:Name="GridRoot">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!--  TickBar muestra los pasos del control deslizante  -->
                        <TickBar x:Name="TopTick"
                                 Height="4"
                                 Fill="{DynamicResource GlyphBrush}"
                                 Placement="Top"
                                 SnapsToDevicePixels="True"
                                 Visibility="Collapsed" />
                        <Border x:Name="Border"
                                Grid.Row="1"
                                Height="4"
                                Margin="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2" />

                        <!--  El control Track muestra los controles RepeatButton y Thumb  -->
                        <Track x:Name="PART_Track" Grid.Row="1">
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource SimpleSliderThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <TickBar x:Name="BottomTick"
                                 Grid.Row="2"
                                 Height="4"
                                 Fill="{TemplateBinding Foreground}"
                                 Placement="Bottom"
                                 SnapsToDevicePixels="True"
                                 Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>

                        <!--  Usar un giro para crear un control deslizante vertical a partir del control horizontal predeterminado  -->
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="GridRoot" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <!--  Track se gira a sí mismo en función de la orientación, por lo que es necesario forzarlo a la posición original  -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Vista de árbol simple: presenta los TreeViewItems dentro de un ScrollViewer  -->
    <Style x:Key="SimpleTreeView" TargetType="{x:Type TreeView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{DynamicResource WindowBackgroundBrush}"
                                BorderBrush="{DynamicResource SolidBorderBrush}"
                                BorderThickness="1"
                                CornerRadius="1">
                            <ScrollViewer Background="{TemplateBinding Background}"
                                          CanContentScroll="False"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Auto"
                                          Padding="4"
                                          Style="{DynamicResource SimpleScrollViewer}"
                                          VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TreeViewItemToggleButton simple: botón + y - para expandir y contraer un TreeViewItem  -->
    <Style x:Key="SimpleTreeViewItemToggleButton"
           d:IsControlPart="True"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Width="15"
                          Height="13"
                          Background="Transparent">
                        <Path x:Name="IsExpandedPath"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 0 4 L 8 4 L 4 8 Z"
                              Fill="{DynamicResource GlyphBrush}"
                              Visibility="Collapsed" />
                        <Path x:Name="ExpandPath"
                              Margin="1,1,1,1"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"
                              Fill="{DynamicResource GlyphBrush}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="IsExpandedPath" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ExpandPath" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TreeViewItem simple: la plantilla TreeViewItem tiene un encabezado que muestra el elemento y un cuerpo incluido en un control ItemsHost que se expande para mostrar los elementos secundarios  -->
    <Style x:Key="SimpleTreeViewItem"
           d:IsControlPart="True"
           TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press"
                                      IsChecked="{Binding Path=IsExpanded,
                                                          RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{DynamicResource SimpleTreeViewItemToggleButton}" />
                        <Border x:Name="Selection_Border"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              ContentSource="Header" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Selection_Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="cameBrush" StartPoint="0.5,0" EndPoint="0.5,1">
    	<GradientStop Offset="0" Color="Black" />
    	<GradientStop Offset="1" Color="#FFB4B4B4" />
    </LinearGradientBrush>

</ResourceDictionary>
